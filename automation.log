2025-02-17 20:31:08,723 - INFO - Launching OpenFin application...
2025-02-17 20:55:29,158 - INFO - Launching OpenFin application...
2025-02-17 20:58:24,050 - INFO - Launching OpenFin application...
2025-02-17 21:08:52,541 - INFO - Launching OpenFin application...
2025-02-17 21:09:40,759 - INFO - Launching OpenFin application...
2025-02-17 23:04:04,623 - INFO - Launching OpenFin application...
2025-02-17 23:04:04,690 - INFO - Waiting for the OpenFin login window to appear...
2025-02-17 23:04:34,693 - ERROR - Login window not found!
2025-02-17 23:04:34,693 - ERROR - Login test failed.
2025-02-17 23:07:23,744 - INFO - Launching OpenFin application...
2025-02-17 23:07:23,846 - INFO - Waiting for the OpenFin login window to appear...
2025-02-17 23:07:53,849 - ERROR - Login window not found!
2025-02-17 23:07:53,849 - ERROR - Login test failed.
2025-02-17 23:23:36,543 - INFO - Launching OpenFin application...
2025-02-17 23:23:36,587 - INFO - Waiting for the OpenFin login window to appear...
2025-02-17 23:23:55,983 - INFO - Filling in login credentials...
2025-02-17 23:23:58,454 - INFO - Login attempt made.
2025-02-17 23:34:38,939 - INFO - Launching OpenFin application...
2025-02-17 23:34:38,990 - INFO - Waiting for the OpenFin login window to appear...
2025-02-17 23:35:08,991 - ERROR - Login window not found!
2025-02-17 23:35:08,991 - ERROR - Login test failed.
2025-02-17 23:37:01,676 - INFO - Launching OpenFin application...
2025-02-17 23:37:01,709 - INFO - Waiting for the OpenFin login window to appear...
2025-02-17 23:37:31,709 - ERROR - Login window not found!
2025-02-17 23:37:31,709 - ERROR - Login test failed.
2025-02-18 00:02:43,565 - INFO - Launching OpenFin application...
2025-02-18 00:02:43,620 - INFO - Waiting for the OpenFin login window to appear...
2025-02-18 00:03:13,636 - ERROR - Login window not found!
2025-02-18 00:03:13,637 - ERROR - Login test failed.
2025-02-18 00:13:24,496 - INFO - Launching OpenFin application...
2025-02-18 00:13:24,526 - INFO - Waiting for the OpenFin login window to appear...
2025-02-18 00:13:54,526 - ERROR - Login window not found!
2025-02-18 00:13:54,526 - ERROR - Login test failed.

(venv) PS C:\Automation\automation_suite> python -m tests.test_login_logout
2025-02-28 16:17:14,998 - INFO - Logging out of the application...
2025-02-28 16:17:15,510 - INFO - Title: Taskbar, Handle: 197016
2025-02-28 16:17:15,511 - INFO - Title: , Handle: 65810
2025-02-28 16:17:15,513 - INFO - Title: ● requirement.txt - automation_suite - Visual Studio Code, Handle: 67002
2025-02-28 16:17:15,514 - INFO - Title: Source of notification.ts - merlin-mfe - Bitbucket - Google Chrome, Handle: 329850
2025-02-28 16:17:15,515 - INFO - Title: Snipping Tool, Handle: 855534
2025-02-28 16:17:15,516 - INFO - Title: 3 Reminder(s), Handle: 199792
2025-02-28 16:17:15,517 - INFO - Title: , Handle: 331172
2025-02-28 16:17:15,518 - INFO - Title: , Handle: 1772888
2025-02-28 16:17:15,519 - INFO - Title: , Handle: 331160
2025-02-28 16:17:15,521 - INFO - Title: , Handle: 7538510
2025-02-28 16:17:15,522 - INFO - Title: *Untitled - Notepad, Handle: 787226
2025-02-28 16:17:15,523 - INFO - Title: Desktop, Handle: 264392
2025-02-28 16:17:15,524 - INFO - Title: automation_suite, Handle: 1638544
2025-02-28 16:17:15,525 - INFO - Title: Inbox - Kasun.Ranasinghe@uk.mizuho-sc.com - Outlook, Handle: 395210
2025-02-28 16:17:15,526 - INFO - Title: Chat | Carey Linus | Microsoft Teams, Handle: 66852
2025-02-28 16:17:15,530 - INFO - Title: Program Manager, Handle: 66048
2025-02-28 16:18:15,531 - ERROR - Dock window not found!
2025-02-28 16:18:15,532 - INFO - Starting the login/logout test...
2025-02-28 16:18:15,532 - INFO - Launching OpenFin application...
fins://fo-openfin.uat.apps.uk.mizuho-sc.com/user/ranaka
2025-02-28 16:18:30,605 - INFO - Waiting for the Mizuho login window to appear...
Control Identifiers:

Dialog - 'Mizuho Front Office'    (L660, T273, R1260, B761)
['Dialog', 'Mizuho Front Office', 'Mizuho Front OfficeDialog', 'Mizuho Front Office0', 'Mizuho Front Office1']
child_window(title="Mizuho Front Office", control_type="Window")
   |
   | Pane - 'Mizuho Front Office'    (L670, T318, R1250, B750)
   | ['Mizuho Front OfficePane', 'Pane', 'Mizuho Front Office2', 'Pane0', 'Pane1']
   | child_window(title="Mizuho Front Office", control_type="Pane")
   |    |
   |    | Pane - ''    (L670, T318, R1250, B750)
   |    | ['Pane2']
   |    |    | 
   |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    | ['Pane3']
   |    |    |    | 
   |    |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    |    | ['Pane4']
   |    |    |    |    | 
   |    |    |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    |    |    | ['Pane5']
   |    |    |    |    |    | 
   |    |    |    |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    |    |    |    | ['Pane6']
   |    |    |    |    |    |    | 
   |    |    |    |    |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    |    |    |    |    | ['Pane7']
   |    |    |    |    |    |    | 
   |    |    |    |    |    |    | Pane - ''    (L670, T318, R1250, B750)
   |    |    |    |    |    |    | ['Pane8']
2025-02-28 16:18:33,337 - INFO - Available controls in the window: None
2025-02-28 16:18:33,337 - INFO - Filling in login credentials...
2025-02-28 16:18:34,886 - INFO - Login attempt made.
2025-02-28 16:18:44,896 - INFO - Login successful.
2025-02-28 16:18:44,903 - INFO - Login test completed successfully.
2025-02-28 16:18:44,912 - INFO - Logging out of the application...
2025-02-28 16:18:47,024 - INFO - Title: workspace-platform-front-office-apps-uat-19.2.12:1, Handle: 789992
2025-02-28 16:18:47,026 - INFO - Title: Dock, Handle: 724458
2025-02-28 16:18:47,027 - INFO - Title: Taskbar, Handle: 197016
2025-02-28 16:18:47,028 - INFO - Title: , Handle: 65810
2025-02-28 16:18:47,030 - INFO - Title: ● requirement.txt - automation_suite - Visual Studio Code, Handle: 67002
2025-02-28 16:18:47,031 - INFO - Title: Source of notification.ts - merlin-mfe - Bitbucket - Google Chrome, Handle: 329850
2025-02-28 16:18:47,032 - INFO - Title: Snipping Tool, Handle: 855534
2025-02-28 16:18:47,033 - INFO - Title: 3 Reminder(s), Handle: 199792
2025-02-28 16:18:47,034 - INFO - Title: , Handle: 331172
2025-02-28 16:18:47,038 - INFO - Title: , Handle: 1772888
2025-02-28 16:18:47,039 - INFO - Title: , Handle: 331160
2025-02-28 16:18:47,041 - INFO - Title: , Handle: 7538510
2025-02-28 16:18:47,043 - INFO - Title: *Untitled - Notepad, Handle: 787226
2025-02-28 16:18:47,044 - INFO - Title: Desktop, Handle: 264392
2025-02-28 16:18:47,046 - INFO - Title: automation_suite, Handle: 1638544
2025-02-28 16:18:47,048 - INFO - Title: Inbox - Kasun.Ranasinghe@uk.mizuho-sc.com - Outlook, Handle: 395210
2025-02-28 16:18:47,050 - INFO - Title: Chat | Carey Linus | Microsoft Teams, Handle: 66852
2025-02-28 16:18:47,052 - INFO - Title: Program Manager, Handle: 66048
2025-02-28 16:18:48,175 - INFO - Clicked on User Profile button.
2025-02-28 16:18:50,631 - INFO - Clicked on Log Out button.
2025-02-28 16:19:20,965 - ERROR - Confirmation dialog not found!
2025-02-28 16:19:20,966 - ERROR - Logout test failed.
(venv) PS C:\Automation\automation_suite> 



notification.js
import { create, IndicatorColor } from '@openfin/workspace/notifications'
import { fin } from '@openfin/core'
import { v4 as uuidv4 } from 'uuid'
import { uniqueId } from 'lodash'

import { envConfig } from '@merlin-mfe/config'
import { EnvConfig, toTitleCase } from '@merlin-mfe/utils'
import { generateTraderNotificationTemplate } from './traderNotificationBaseTemplate'
import { LiveInquiryRecord, RawClosedInquiryRecord } from '@merlin-mfe/api'

const env: EnvConfig = envConfig

const IndicatorMapper: { [key: string]: { color: IndicatorColor; text: string } } = {
    ERROR: { color: IndicatorColor.RED, text: 'Error' },
    SUCCESS: { color: IndicatorColor.GREEN, text: 'Notification' },
    INFO: { color: IndicatorColor.BLUE, text: 'Info' }
}

export enum IndicatorType {
    'ERROR' = 'ERROR',
    'SUCCESS' = 'SUCCESS',
    'INFO' = 'INFO'
}

type TradeNotificationProps = {
    titleOne: string
    titleTwo: string
    firm: string
    customer: string
    settleDate: string
    closeTime: string
    coverPrice: string
    spread: string
    coverSpread: string | number
    market: string
    traderUser: string
    dv: string
    source: string
    benchmark: string
    benchmarkIsin: string | undefined
}

export const createTradeNotification = async (
    rfq: LiveInquiryRecord | RawClosedInquiryRecord,
    info: TradeNotificationProps,
    headerColor: string,
    sticky: boolean,
    isDark?: boolean
) => {
    const now = new Date() // Get the current time
    const midnight = new Date() // Get midnight time (next day at 00:00)
    midnight.setHours(24, 0, 0, 0) // Set the hours to 24:00 (which is equivalent to 00:00 of the next day)

    const baseTemplate = generateTraderNotificationTemplate(headerColor, isDark)

    await create({
        toast: sticky ? 'sticky' : 'transient',
        buttons: info.benchmarkIsin
            ? [
                  {
                      title: 'ALLQ BM',
                      type: 'button',
                      cta: true,
                      onClick: {
                          customData: {
                              action: 'open-benchmark',
                              benchmarkIsin: info.benchmarkIsin
                          }
                      }
                  },
                  {
                      title: 'Historical Ticket',
                      type: 'button',
                      cta: true,
                      onClick: {
                          customData: {
                              action: 'open-historical-ticket',
                              rfq: rfq
                          }
                      }
                  }
              ]
            : [
                  {
                      title: 'Historical Ticket',
                      type: 'button',
                      cta: true,
                      onClick: {
                          customData: {
                              action: 'open-historical-ticket',
                              rfq: rfq
                          }
                      }
                  }
              ],
        title: '',
        id: uniqueId(),
        platform: fin.me.uuid,
        icon: env?.OPENFIN_SERVER_BASE_URL ? `${env.OPENFIN_SERVER_BASE_URL}/favicon.png` : '',
        soundOptions: { mode: 'default' },
        stream: {
            id: fin.me.uuid,
            displayName: 'Merlin',
            appId: 'Merlin'
        },
        timeout: midnight.getTime() - now.getTime(), // Calculate the difference & Set the timeout in milliseconds
        template: 'custom',
        templateOptions: baseTemplate,
        templateData: {
            contentHeaderOne: info.titleOne,
            contentHeaderTwo: info.titleTwo,
            contentDate: info.settleDate,
            contentTime: info.closeTime,
            contentTraderUser: info.traderUser,
            contentClientName: info.firm,
            contentClientTrader: info.customer,
            contentDV: info.dv,
            contentSource: info.source,
            contentCoverPriceHeader: 'Cover Price',
            contentCoverPrice: info.coverPrice.toString(),
            contentSpreadHeader: 'Spread',
            contentSpread: info.spread.toString(),
            contentCoverSpreadHeader: 'Cover Spread',
            contentCoverSpread: info.coverSpread.toString(),
            contentMarketHeader: 'Market',
            contentMarket: info.market,
            contentBenchmark: info.benchmark
        }
    })
}

export const createNotification = async (notification: {
    indicator: { type: IndicatorType; text?: string }
    body: string
}) => {
    const {
        indicator: { type, text },
        body
    } = notification
    const now = new Date() // Get the current time
    const midnight = new Date() // Get midnight time (next day at 00:00)
    midnight.setHours(24, 0, 0, 0) // Set the hours to 24:00 (which is equivalent to 00:00 of the next day)

    await create({
        buttons: [],
        indicator: { color: IndicatorMapper[type].color, text: text ?? IndicatorMapper[type].text },
        title: '',
        body: body,
        id: uniqueId(),
        platform: fin.me.uuid,
        icon: env?.OPENFIN_SERVER_BASE_URL ? `${env.OPENFIN_SERVER_BASE_URL}/favicon.png` : '',
        soundOptions: { mode: 'default' },
        stream: {
            id: fin.me.uuid,
            displayName: 'Merlin',
            appId: 'Merlin'
        },
        timeout: midnight.getTime() - now.getTime() // Calculate the difference & Set the timeout in milliseconds
    })
}

const identity = {
    uuid: toTitleCase(fin.me.uuid?.replaceAll('-', ' ') ?? ''),
    name: toTitleCase(fin.me.name?.replaceAll('-', ' ') ?? '')
}

const PopupMessageMapper = (action: string, platformName: string): { title: string; desc: string } => {
    const mapper: { [key: string]: { title: string; desc: string } } = {
        resetWindowLayout: {
            title: `Reset ${identity.name} Layout`,
            desc: `Are you sure you want to replace existing ${identity.name} layout to default App layout.`
        },
        resetColumns: {
            title: 'Reset Columns',
            desc: `Are you sure you want to replace existing ${identity.name} Columns to default Column settings`
        },
        resetFilters: {
            title: 'Reset Filters',
            desc: `Are you sure you want to replace existing ${identity.name} Filters to default Filter settings`
        },
        resetSoundFilters: {
            title: 'Reset Sound Filters',
            desc: `Are you sure you want to replace existing ${identity.name} Sound Filters to default Sound settings`
        },
        resetQuoting: {
            title: 'Reset Quoting',
            desc: `Are you sure you want to replace existing ${identity.name} Quoting to default Quoting settings`
        },
        logout: {
            title: `Log Out of ${platformName}`,
            desc: `Are you sure you want to Log out of ${platformName}`
        }
    }

    return mapper[action]
}

export async function showPopup(
    isPlatform: boolean,
    action:
        | 'resetWindowLayout'
        | 'resetPlatformLayout'
        | 'resetColumns'
        | 'resetFilters'
        | 'resetSoundFilters'
        | 'resetQuoting'
        | 'logout',
    popupResultConfirmCallback: (payload: any) => Promise<void>
) {
    if (fin.me.isOpenFin) {
        const popupWidth = 400
        const popupHeight = 150
        let windowWidth
        let windowHeight

        if (fin.me.isWindow) {
            const win = fin.Window.getCurrentSync()
            const winState = await win.getState()

            if (isPlatform || winState === 'maximized') {
                windowWidth = window.screen.width
                windowHeight = window.screen.height
            } else {
                const bounds = await win.getBounds()
                windowWidth = bounds.width
                windowHeight = bounds.height
            }
        } else {
            const view = fin.View.getCurrentSync()
            const bounds = await view.getBounds()
            windowWidth = bounds.width
            windowHeight = bounds.height
        }

        const platformName = `[${env.REACT_NODE_ENV}] Front Office Apps - v${env.OPENFIN_PLATFORM_VERSION}`
        const x = windowWidth / 2 - popupWidth / 2 // Location and size of popup window derived from parent window bounds.
        const y = windowHeight / 2 - popupHeight / 2

        await fin.me.showPopupWindow({
            name: `modal-${uuidv4()}`,
            initialOptions: {
                showTaskbarIcon: false,
                defaultCentered: true,
                modalParentIdentity: fin.me.identity,
                // contextMenu: false,
                includeInSnapshots: false,
                preloadScripts: [
                    {
                        url: `${env?.OPENFIN_SERVER_BASE_URL}/common/style/style-changed-preload.js`
                    }
                ],
                customData: {
                    title: PopupMessageMapper(action, platformName).title,
                    message: PopupMessageMapper(action, platformName).desc,
                    buttons: [
                        {
                            label: 'Cancel',
                            value: 'cancel'
                        },
                        {
                            label: 'Confirm',
                            value: 'confirm'
                        }
                    ]
                }
            },
            x,
            y,
            width: popupWidth,
            height: popupHeight,
            url: `${env?.OPENFIN_SERVER_BASE_URL}/merlin/popups/dialog/index.html`,
            blurBehavior: 'modal',
            onPopupResult: async function (payload: any) {
                if (payload.result === 'clicked') {
                    if (payload.data.value === 'confirm') {
                        await popupResultConfirmCallback(payload)
                    }
                }
            }
        })
    }
}